# Stubs for pika.channel (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

LOGGER: Any
MAX_CHANNELS: int

class Channel:
    CLOSED: int = ...
    OPENING: int = ...
    OPEN: int = ...
    CLOSING: int = ...
    channel_number: Any = ...
    callbacks: Any = ...
    connection: Any = ...
    flow_active: bool = ...
    def __init__(self, connection: Any, channel_number: Any, on_open_callback: Any) -> None: ...
    def __int__(self): ...
    def add_callback(self, callback: Any, replies: Any, one_shot: bool = ...) -> None: ...
    def add_on_cancel_callback(self, callback: Any) -> None: ...
    def add_on_close_callback(self, callback: Any) -> None: ...
    def add_on_flow_callback(self, callback: Any) -> None: ...
    def add_on_return_callback(self, callback: Any) -> None: ...
    def basic_ack(self, delivery_tag: int = ..., multiple: bool = ...): ...
    def basic_cancel(self, callback: Optional[Any] = ..., consumer_tag: str = ..., nowait: bool = ...) -> None: ...
    def basic_consume(self, consumer_callback: Any, queue: str = ..., no_ack: bool = ..., exclusive: bool = ..., consumer_tag: Optional[Any] = ..., arguments: Optional[Any] = ...): ...
    def basic_get(self, callback: Optional[Any] = ..., queue: str = ..., no_ack: bool = ...) -> None: ...
    def basic_nack(self, delivery_tag: Optional[Any] = ..., multiple: bool = ..., requeue: bool = ...): ...
    def basic_publish(self, exchange: Any, routing_key: Any, body: Any, properties: Optional[Any] = ..., mandatory: bool = ..., immediate: bool = ...) -> None: ...
    def basic_qos(self, callback: Optional[Any] = ..., prefetch_size: int = ..., prefetch_count: int = ..., all_channels: bool = ...): ...
    def basic_reject(self, delivery_tag: Any, requeue: bool = ...): ...
    def basic_recover(self, callback: Optional[Any] = ..., requeue: bool = ...): ...
    def close(self, reply_code: int = ..., reply_text: str = ...) -> None: ...
    def confirm_delivery(self, callback: Optional[Any] = ..., nowait: bool = ...) -> None: ...
    @property
    def consumer_tags(self): ...
    def exchange_bind(self, callback: Optional[Any] = ..., destination: Optional[Any] = ..., source: Optional[Any] = ..., routing_key: str = ..., nowait: bool = ..., arguments: Optional[Any] = ...): ...
    def exchange_declare(self, callback: Optional[Any] = ..., exchange: Optional[Any] = ..., exchange_type: str = ..., passive: bool = ..., durable: bool = ..., auto_delete: bool = ..., internal: bool = ..., nowait: bool = ..., arguments: Optional[Any] = ...): ...
    def exchange_delete(self, callback: Optional[Any] = ..., exchange: Optional[Any] = ..., if_unused: bool = ..., nowait: bool = ...): ...
    def exchange_unbind(self, callback: Optional[Any] = ..., destination: Optional[Any] = ..., source: Optional[Any] = ..., routing_key: str = ..., nowait: bool = ..., arguments: Optional[Any] = ...): ...
    def flow(self, callback: Any, active: Any) -> None: ...
    @property
    def is_closed(self): ...
    @property
    def is_closing(self): ...
    @property
    def is_open(self): ...
    def open(self) -> None: ...
    def queue_bind(self, callback: Any, queue: Any, exchange: Any, routing_key: Optional[Any] = ..., nowait: bool = ..., arguments: Optional[Any] = ...): ...
    def queue_declare(self, callback: Any, queue: str = ..., passive: bool = ..., durable: bool = ..., exclusive: bool = ..., auto_delete: bool = ..., nowait: bool = ..., arguments: Optional[Any] = ...): ...
    def queue_delete(self, callback: Optional[Any] = ..., queue: str = ..., if_unused: bool = ..., if_empty: bool = ..., nowait: bool = ...): ...
    def queue_purge(self, callback: Optional[Any] = ..., queue: str = ..., nowait: bool = ...): ...
    def queue_unbind(self, callback: Optional[Any] = ..., queue: str = ..., exchange: Optional[Any] = ..., routing_key: Optional[Any] = ..., arguments: Optional[Any] = ...): ...
    def tx_commit(self, callback: Optional[Any] = ...): ...
    def tx_rollback(self, callback: Optional[Any] = ...): ...
    def tx_select(self, callback: Optional[Any] = ...): ...

class ContentFrameAssembler:
    def __init__(self) -> None: ...
    def process(self, frame_value: Any): ...
